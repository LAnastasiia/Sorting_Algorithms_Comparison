This file contains results from running _min_size_find.py module.
First value in each block is length of input array. Then there are ~10 pairs of values (for each experiment):
  * first value in pair is the most optimal min_size value for specific ixperiment
  * second value is a relative part of benetited time-difference in the executinal-time of simple Quick Sort
    (max in specific experiment).
The last line in every block is calculated average min_size value for tested array's length.


In some blocks we can see pairs (1 0) - which eans for some sets of arry's elements it was more efficient to use
Quick Sort, as the array was more "convenient" for partition.
Some blocks also have more than 10 pairs (experiments) as some arrays' lengths were tested separately multiple times.


1024
9 1.3635637873223696
11 35.1088295078562
1 0
5 0.23347158513472685
11 8.0100695276912
11 11.782825531201542
8 41.9780861441231
4 35.811386216685065
13 7.498955577217657
3 8.497298283212878
1024 --> 8

2048
9 40.049279167729615
12 9.348764305498895
6 15.155647238441547
8 27.46714190242816
52 68.41002570694087
10 9.709876543209877
1 0.1573357807788121
12 10.998692661854147
2048 --> 11
4096
15 4.994051481721826
10 1.0122440632908156
8 9.93750831006515
7 4.42604226156482
12 5.7158853769023255
8 0.237382598823408
6 3.1150117893633746
8 4.895216765317549
4096 --> 8
8192
13 5.958708336286112
9 6.249845270220088
7 0.0036798528058877645
4 1.3519148764443967
4 0.23526419533286702
10 6.257756624317097
5 4.204660587639311
8192 --> 6
16384
8 3.324865302476201
4 1.2560719578462045
6 2.500635159168185
1 0
7 8.374095708473824
7 8.416253536611812
9 5.969598928120732
12 4.191302295391515
7 5.864239658005798
8 6.947023146429014
16384 --> 7

32768
7 4.0539563328701815
8 1.0646570929630788
6 1.465300298352575
9 1.7073873660337924
1 0
1 0
9 1.0741745184108258
1 0
8 1.3539377999940103
5 6.265383697323269
32768 --> 6

65536
7 6.265587059746286
6 4.433410305563512
5 3.4595340169577327
5 0.8993801825313132
5 0.681987843260337
8 3.5527089207762828
7 2.274584266891406
7 3.5917165360603014
6 0.5420860322942981
7 0.4280544923323495
65536 --> 6

131072
9 0.4711604938851256
7 1.508225024375867
7 1.2611958057600177
7 0.23828476985064453
10 1.9306139816127725
9 0.7606265029498637
8 2.6902119310189945
1 0
6 0.8247852948265016
8 2.763540018483495
131072 --> 7

262144
6 1.1977260873884465
11 0.7438243143987282
1 0
5 1.2082305420110462
9 2.2632808070592083
6 0.01984485361602332
4 0.868267981599433
9 1.108942016397096
10 0.3782545996474913
7 0.6927184825799629
262144 --> 7

524288
6 1.1593305190810548
9 1.2635849525498999
5 2.108549802711083
5 0.3872465445163983
6 1.817907756086427
9 0.9289606421885511
6 55.52684890517803
6 0.01136921930634432
6 0.06403323346514368
6 2.0067840892432423
6 1.8949339587879817
7 1.3038243804329341
8 0.8258672675841403
8 0.38551421531880403
524288 --> 7


1048576
7 1.0582126615316567
7 0.12251236286948705
8 0.07034185820589685
6 0.6365599268586675
7 0.7986770664802735
9 0.8092152388229846
6 0.7960335693564955
16 6.520600620207459
5 0.2331117932693391
6 0.7930475422657111
6 0.6352921418776242
7 1.432204242998477
6 0.5533298616666351
1048576 --> 8

